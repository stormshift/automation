---
# This playbook updates a template vm
# Example to run manually:
#  ansible-playbook -e@../stormshift-dev.vars 300-update-templates.yaml
- hosts: "template_vms"
  gather_facts: false
  tasks:
    - name: Start VM
      changed_when: false  # starting the VM does not really change its state on disk, at least not in the update OS context
      local_action:
        module: kubevirt.core.kubevirt_vm
        api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
        host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
        validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"
        state: present
        running: true
        wait: true
        name: "{{ vm_cr_name }}"
        namespace: "{{ stormshift_template_vms_namespace }}"

    - name: Wait for VM to be online
      local_action:
        module: ansible.builtin.wait_for
        host: "{{ inventory_hostname }}.{{ sysctx_dns_domain }}"
        port: 22
        state: started

    - name: Register and Subscribe RHEL9
      tags: prep,sub,slow
      when: "rhel_version.startswith('9')"
# redhat_subscription sometimes fails with "already registered, despite force"
# Hence we brute force it here:
      command: subscription-manager register --username {{ rhsm_user }} --password {{ rhsm_pswd }} --force --auto-attach --release {{ rhel_version}}

    - name: Register and Subscribe RHEL10
      tags: prep,sub,slow
      when: "rhel_version.startswith('10')"
# redhat_subscription sometimes fails with "already registered, despite force"
# Hence we brute force it here:
      command: subscription-manager register --username {{ rhsm_user }} --password {{ rhsm_pswd }} --force --release {{ rhel_version}}

    - name: Enable EUS Repos
      tags: upd, slow
      rhsm_repository:
        state: enabled
        name:
          - rhel-{{ rhel_version | split('.') | first }}-for-x86_64-appstream-eus-rpms
          - rhel-{{ rhel_version | split('.') | first }}-for-x86_64-baseos-eus-rpms


    - name: Update baseos
      tags: upd, slow
      yum:
        name: '*'
        state: latest
      register: osupdate

    - name: Stop VM
      changed_when: false
      local_action:
        module: kubevirt.core.kubevirt_vm
        api_key:         "{{ hostvars['isar']['k8s_auth_api_key'] }}"
        host:            "{{ hostvars['isar']['k8s_auth_host'] }}"
        validate_certs:  "{{ hostvars['isar']['k8s_auth_verify_ssl'] }}"
        state: present
        running: false
        wait: true
        name: "{{ vm_cr_name }}"
        namespace: "{{ stormshift_template_vms_namespace }}"
